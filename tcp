#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""TCP related tools
============================

This script will handle various instrumentation related to Linux TCP
stack. It is heavily inspired from agentzh script:
https://github.com/agentzh/nginx-systemtap-toolkit/blob/master/tcp-accept-queue

"""

import sys
import os
import stap
import jinja2


@stap.d.enable
@stap.d.linux("3.11")
@stap.d.arg("port", metavar="PORT", type=int,
            help="listening port to be analyzed")
@stap.d.arg("--interval", default=1000, type=int,
            help="delay between screen updates in milliseconds")
def accept_queue_length(options):
    """Distribution of SYN and accept queue length."""
    probe = jinja2.Template(ur"""
global syn_qlen_stats
global acc_qlen_stats
global max_syn_qlen
global max_acc_qlen

probe kernel.function("tcp_v4_conn_request") {
    tcphdr = __get_skb_tcphdr($skb);
    dport = __tcp_skb_dport(tcphdr);
    if (dport != {{ options.port }}) next;

    // First time: compute maximum queue lengths
    if (max_syn_qlen == 0) {
      max_qlen_log = @cast($sk,
         "struct inet_connection_sock")->icsk_accept_queue->listen_opt->max_qlen_log;
      max_syn_qlen = (1 << max_qlen_log);
    }
    if (max_acc_qlen == 0) {
      max_acc_qlen = $sk->sk_max_ack_backlog;
    }

    syn_qlen = @cast($sk, "struct inet_connection_sock")->icsk_accept_queue->listen_opt->qlen;
    syn_qlen_stats <<< syn_qlen;

    acc_qlen_stats <<< $sk->sk_ack_backlog;
}

probe timer.ms({{ options.interval }}) {
    if (max_syn_qlen == 0) {
      printf("No new connection on port {{ options.port }}, yet.\n");
      next;
    }
    ansi_clear_screen();
    ansi_set_color2(30, 46);
    printf(" ♦ Syn queue \n");
    ansi_reset_color();
    print(@hist_log(syn_qlen_stats))
    printf(" — min:%d avg:%d max:%d count:%d\n",
                     @min(syn_qlen_stats),
                     @avg(syn_qlen_stats),
                     @max(syn_qlen_stats),
                     @count(syn_qlen_stats));
    printf(" — allowed maximum: %d\n\n", max_syn_qlen);

    ansi_set_color2(30, 46);
    printf(" ♦ Accept queue \n");
    ansi_reset_color();
    print(@hist_log(acc_qlen_stats))
    printf(" — min:%d avg:%d max:%d count:%d\n",
                     @min(acc_qlen_stats),
                     @avg(acc_qlen_stats),
                     @max(acc_qlen_stats),
                     @count(acc_qlen_stats));
    printf(" — allowed maximum: %d\n\n", max_acc_qlen);
}
""")
    probe = probe.render(options=options).encode("utf-8")
    stap.execute(probe, options)


@stap.d.enable
@stap.d.linux("3.11")
@stap.d.arg("port", metavar="PORT", type=int,
            help="listening port to be analyzed")
@stap.d.arg("--interval", default=1000, type=int,
            help="delay between screen updates in milliseconds")
def accept_queue_latency(options):
    """Distribution of accept queue latencies."""
    probe = jinja2.Template(ur"""
global begin_times;
global latency_stats;
global found;

probe kernel.function("tcp_openreq_init") {
    tcphdr = __get_skb_tcphdr($skb);
    dport = __tcp_skb_dport(tcphdr);
    if (dport != {{ options.port }}) next;

    begin_times[$req] = gettimeofday_us();
{%- if options.debug %}
    printf("%s: %p %d\n", ppfunc(), $req, dport);
{%- endif %}
}

probe kernel.function("inet_csk_accept"),
  kernel.function("inet_csk_wait_for_connect").return {
    req = @cast($sk, "struct inet_connection_sock")->icsk_accept_queue->rskq_accept_head;
    begin = begin_times[req];
    if (!begin) next;

    elapsed = gettimeofday_us() - begin;
{%- if options.debug %}
    printf("%s: sk=%p, req=%p, latency=%d\n", ppfunc(), $sk, req, elapsed);
{%- endif %}
    latency_stats <<< elapsed;
    delete begin_times[req];
    found = 1;
}

probe timer.ms({{ options.interval }}) {
    if (found == 0) {
      printf("No new connection on port {{ options.port }}, yet.\n");
      next;
    }
    ansi_clear_screen();
    ansi_set_color2(30, 46);
    printf(" ♦ Accept queueing latency distribution \n");
    ansi_reset_color();
    print(@hist_log(latency_stats))
    printf(" — min:%dus avg:%dus max:%dus count:%d\n",
                     @min(latency_stats),
                     @avg(latency_stats),
                     @max(latency_stats),
                     @count(latency_stats));
}
""")
    probe = probe.render(options=options).encode("utf-8")
    stap.execute(probe, options)


@stap.d.enable
@stap.d.linux("3.11")
@stap.d.arg("port", metavar="PORT", type=int,
            help="listening port to be analyzed")
def accept_queue_overflow(options):
    """Trace SYN/ACK backlog queue overflows"""
    probe = jinja2.Template(ur"""
probe kernel.function("tcp_v4_conn_request") {
    tcphdr = __get_skb_tcphdr($skb);
    dport = __tcp_skb_dport(tcphdr);
    if (dport != {{ options.port }}) next;

    syn_qlen = @cast($sk, "struct inet_connection_sock")->icsk_accept_queue->listen_opt->qlen;
    max_syn_qlen_log = @cast($sk, "struct inet_connection_sock")->icsk_accept_queue->listen_opt->max_qlen_log;
    max_syn_qlen = (2 << max_syn_qlen_log);

    if (syn_qlen > max_syn_qlen) {
            now = tz_ctime(gettimeofday_s());
            printf("[%s] SYN queue is overflown: %d > %d\n", now, syn_qlen, max_syn_qlen);
    }

    ack_backlog = $sk->sk_ack_backlog;
    max_ack_backlog = $sk->sk_max_ack_backlog;

    if (ack_backlog > max_ack_backlog) {
            now = tz_ctime(gettimeofday_s());
            printf("[%s] ACK backlog queue is overflown: %d > %d\n", now, ack_backlog, max_ack_backlog);
    }
}
""")
    probe = probe.render(options=options).encode("utf-8")
    stap.execute(probe, options)


@stap.d.enable
@stap.d.linux("4.0.0")
@stap.d.arg("--local", metavar="PORT", type=int,
            default=0,
            help="filter on local port")
@stap.d.arg("--remote", metavar="PORT", type=int,
            default=0,
            help="filter on remote port")
@stap.d.arg("--interval", metavar="MS", default=1000, type=int,
            help="delay between screen updates in milliseconds")
@stap.d.arg("--step", metavar="SIZE", type=int,
            default=200,
            help="each bucket represent SIZE kbytes")
def receive_window_size(options):
    """Display receive window size advertised for the specified connection"""
    # We could watch for tcp_select_window return value but this
    # function is inlined. We prefer tcp_option_write which is
    # happening a bit later.
    probe = jinja2.Template(ur"""
global window_sizes;
global found;

probe kernel.function("tcp_options_write") {
    tcphdr = $ptr - &@cast(0, "tcphdr")[1];
    sport = __tcp_skb_sport(tcphdr);
{%- if options.local != 0 %}
    if ({{options.local}} != sport) next;
{%- endif %}
    dport = __tcp_skb_dport(tcphdr);
{%- if options.remote != 0 %}
    if ({{options.remote}} != dport) next;
{%- endif %}
    scaled_window = ntohs(@cast(tcphdr, "tcphdr")->window);
    scale_factor = $tp->rx_opt->rcv_wscale
    window = scaled_window << scale_factor;
    window_sizes <<< window/1024;
    found = 1;
{%- if options.debug %}
    printf("[%d -> %d]: window size=%d\n", sport, dport, window);
{%- endif %}
}

probe timer.ms({{ options.interval }}) {
    if (found == 0) {
      printf("No window sizes captured, yet.\n");
      next;
    }
    ansi_clear_screen();
    ansi_set_color2(30, 46);
    printf(" ♦ Window size distribution \n");
    ansi_reset_color();
    print(@hist_linear(window_sizes, 0, {{ options.step * 20 }}, {{ options.step }}))
    printf(" — min:%dkb avg:%dkb max:%dkb count:%d\n",
                     @min(window_sizes),
                     @avg(window_sizes),
                     @max(window_sizes),
                     @count(window_sizes));
}
""")
    probe = probe.render(options=options).encode("utf-8")
    stap.execute(probe, options)



@stap.d.enable
@stap.d.linux("4.0.0")
@stap.d.arg("--local", metavar="PORT", type=int,
            default=0,
            help="filter on local port")
@stap.d.arg("--remote", metavar="PORT", type=int,
            default=0,
            help="filter on remote port")
@stap.d.arg("--interval", metavar="MS", default=100, type=int,
            help="sample rate for a given socket")
@stap.d.arg("--bandwidth", default=False,
            action="store_true",
            help="display estimated bandwidth")
@stap.d.arg("--extensive", default=False,
            action="store_true",
            help="display more extensive information")
def sockstat(options):
    """Display various socket statistics, a bit like `ss'. """
    probe = jinja2.Template(ur"""
global last;
{%- if options.bandwidth %}
global snd_una;
global rcv_nxt;
{%- endif %}

probe begin {
    # Print a header
    printf("ts,sk,func,state,sport,dport");
    printf(",rq,wq,advwin,retransmits,probes,backoff");
    printf(",snd_wscale,rcv_wscale,rto,ato,snd_mss,rcv_mss");
    printf(",unacked,sacked,lost,retrans,fackets");
    printf(",last_data_sent,last_data_rcv,last_ack_recv");
    printf(",rcv_ssthresh,rtt,rtt_var,snd_ssthresh,snd_cwnd,advmss,reordering");
    printf(",rcv_rtt,rcv_space,total_retrans");
    printf(",skmem_r,skmem_rb,skmem_t,skmem_tb,skmem_f,skmem_w,skmem_o,skmem_bl");
{%- if options.extensive %}
    printf(",ack_bl,ack_max_bl");
{%- endif %}
{%- if options.bandwidth %}
    printf(",snd_bw,rcv_bw");
{%- endif %}
    printf("\n");
}

# Plug to tcp_options_write just to be able to also get receive window.
probe kernel.function("tcp_options_write") {
    # Check if we need to retrieve information
    state = tcp_ts_get_info_state($tp);
    now = gettimeofday_ms();
    prev = last[$tp,state];
    if (now - prev <= {{ options.interval }}) next;
    last[$tp,state] = now;

    # Retrieve source and destination port and do filtering
    tcphdr = $ptr - &@cast(0, "tcphdr")[1];
    sport = __tcp_skb_sport(tcphdr);
    dport = __tcp_skb_dport(tcphdr);
{%- if options.remote != 0 %}
    if ({{options.remote}} != dport) next;
{%- endif %}
{%- if options.local != 0 %}
    if ({{options.local}} != sport) next;
{%- endif %}

    # Advertised receive window
    tcphdr = $ptr - &@cast(0, "tcphdr")[1];
    scaled_window = ntohs(@cast(tcphdr, "tcphdr")->window);
    scale_factor = $tp->rx_opt->rcv_wscale
    window = scaled_window << scale_factor;

    # Print all available information
    printf("%lu,%lu,%s,%s,%d,%d", now, $tp, ppfunc(),
           tcp_sockstate_str(state), sport, dport);
    printf(",%lu,%lu,%lu,%lu,%lu,%lu",
           $tp->rcv_nxt - $tp->copied_seq,
           $tp->write_seq - $tp->snd_una,
           window,
           @cast($tp, "inet_connection_sock")->icsk_retransmits,
           @cast($tp, "inet_connection_sock")->icsk_probes_out,
	   @cast($tp, "inet_connection_sock")->icsk_backoff);
    printf(",%d,%d,%lu,%lu,%lu,%lu",
           $tp->rx_opt->snd_wscale,
           $tp->rx_opt->rcv_wscale,
           tcp_get_info_rto($tp),
           cputime_to_usecs(@cast($tp, "inet_connection_sock")->icsk_ack->ato),
           $tp->mss_cache,
	   @cast($tp, "inet_connection_sock")->icsk_ack->rcv_mss);
    printf(",%lu,%lu,%lu,%lu,%lu",
           $tp->packets_out, $tp->sacked_out,
           $tp->lost_out, $tp->retrans_out, $tp->fackets_out);
    printf(",%lu,%lu,%lu",
           now - cputime_to_msecs($tp->lsndtime),
	   now - cputime_to_msecs(@cast($tp, "inet_connection_sock")->icsk_ack->lrcvtime),
	   now - cputime_to_msecs($tp->rcv_tstamp));
    printf(",%lu,%lu,%lu,%lu,%lu,%lu,%lu",
	   $tp->rcv_ssthresh,
	   $tp->srtt_us >> 3,
	   $tp->mdev_us >> 2,
	   $tp->snd_ssthresh,
	   $tp->snd_cwnd,
	   $tp->advmss,
	   $tp->reordering);
    printf(",%lu,%lu,%lu",
	   cputime_to_usecs($tp->rcv_rtt_est->rtt)>>3,
           $tp->rcvq_space->space,
           $tp->total_retrans);
    printf(",%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu",
           atomic_read(&@cast($tp, "sock")->sk_backlog->rmem_alloc),
           @cast($tp, "sock")->sk_rcvbuf,
           atomic_read(&@cast($tp, "sock")->sk_wmem_alloc),
           @cast($tp, "sock")->sk_sndbuf,
           @cast($tp, "sock")->sk_forward_alloc, @cast($tp, "sock")->sk_wmem_queued,
           atomic_read(&@cast($tp, "sock")->sk_omem_alloc),
           @cast($tp, "sock")->sk_backlog->len);

{%- if options.extensive %}
    printf(",%u,%u",
           @cast($tp, "sock")->sk_ack_backlog,
           @cast($tp, "sock")->sk_max_ack_backlog);
{%- endif %}

{%- if options.bandwidth %}
    last_snd_una = snd_una[$tp];
    last_rcv_nxt = rcv_nxt[$tp];
    snd_una[$tp] = $tp->snd_una;
    rcv_nxt[$tp] = $tp->rcv_nxt;
    if (last_snd_una != 0 && last_snd_una <= $tp->snd_una)
        printf(",%lu", ($tp->snd_una - last_snd_una)*1000/(now - prev));
    else
        printf(",");
    if (last_rcv_nxt != 0 && last_rcv_nxt <= $tp->rcv_nxt)
        printf(",%lu", ($tp->rcv_nxt - last_rcv_nxt)*1000/(now - prev));
    else
        printf(",");
{%- endif %}

    printf("\n");
}
""")
    probe = probe.render(options=options).encode("utf-8")
    stap.execute(probe, options)

stap.run(sys.modules[__name__])
